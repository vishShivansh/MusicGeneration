generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  credits       Int       @default(100)
  likes         Like[]
  songs         Song[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Song {
  id                String     @id @default(cuid())
  title             String
  s3Key             String?
  thumbnailS3Key    String?
  status            String     @default("queued")
  instrumental      Boolean    @default(false)
  prompt            String?
  lyrics            String?
  fullDescribedSong String?
  describedLyrics   String?
  guidanceScale     Float?
  inferStep         Float?
  audioDuration     Float?
  seed              Float?
  published         Boolean    @default(false)
  listenCount       Int        @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  userId            String
  likes             Like[]
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories        Category[] @relation("CategoryToSong")

  @@index([s3Key])
}

model Like {
  userId String
  songId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, songId])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  songs Song[] @relation("CategoryToSong")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
